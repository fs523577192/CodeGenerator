<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<codeTemplateList>
    <templates>
        <templates version="1.3">
            <id>7b47c045-3356-4629-9ff2-cffd55b198d9</id>
            <name>Example CopyMethod</name>
            <fileNamePattern>.*\.java$</fileNamePattern>
            <type>caret</type>
            <enabled>true</enabled>
            <template><![CDATA[// libPath=
// if you want to use other third party jar
// add the jar directory absolute path to the libPath
// e.g libPath=/../thirdPartyLib/:/../thirdPartyLibTwo/  (!!! end with lineSeparator !!!)

// (!!! not stable !!!)
// if you want to use the Idea's util class .e.g PsiClass
// add your idea lib directory absolute path to the libPath
// e.g for mac /.../IntelliJ IDEA.app/Contents/lib/

import java.util.Collection;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.CollectionUtils;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.printer.PrettyPrinterConfiguration;
import me.lotabout.codegenerator.ext.Optional;
public class Template {

    /** What is inside the {@param context} See {@link me.lotabout.codegenerator.ext.Doc} */
    @SuppressWarnings("unchecked")
    public String build(Map<String, Object> context){

        PrettyPrinterConfiguration printConfig = new PrettyPrinterConfiguration();
        StringBuilder sb = new StringBuilder();
        Optional.ofNullable(context.get("methods"))
                .map(obj-> (List<MethodDeclaration>) obj)
                .filter(CollectionUtils::isNotEmpty)
                .stream()
                .flatMap(Collection::stream)
                .forEach(methodDeclarations -> {
                    sb.append(methodDeclarations.toString(printConfig));
                    sb.append(System.lineSeparator());
                });
        return sb.toString();
    }

}
]]>
</template>
            <fileEncoding>UTF-8</fileEncoding>
            <pipeline>
                <classSelection>
                    <initialClass>$class0.qualifiedName</initialClass>
                    <enabled>true</enabled>
                    <postfix>1</postfix>
                </classSelection>
                <memberSelection>
                    <filterConstantField>true</filterConstantField>
                    <filterEnumField>false</filterEnumField>
                    <filterTransientModifier>false</filterTransientModifier>
                    <filterStaticModifier>true</filterStaticModifier>
                    <filterLoggers>true</filterLoggers>
                    <filterFieldName></filterFieldName>
                    <filterFieldType></filterFieldType>
                    <filterMethodName></filterMethodName>
                    <filterMethodType></filterMethodType>
                    <enableMethods>true</enableMethods>
                    <providerTemplate>## set `availableMembers` to provide the members to select
## set `selectedMembers` to select the members initially, set nothing to select all
## Note that it should be type List&lt;PsiMember&gt; or List&lt;MemberEntry&gt;
## And the selected result will be
## - fields1:  List&lt;FieldEntry&gt; where `1` is the step number that you specified
## - methods1: List&lt;MethodEntry&gt;
## - members:  List&lt;MemberEntry&gt;
#set($availableMembers = $class1.members)
</providerTemplate>
                    <allowMultiSelection>true</allowMultiSelection>
                    <allowEmptySelection>true</allowEmptySelection>
                    <sortElements>0</sortElements>
                    <postfix>2</postfix>
                    <enabled>true</enabled>
                </memberSelection>
            </pipeline>
            <insertNewMethodOption>AT_CARET</insertNewMethodOption>
            <whenDuplicatesOption>ASK</whenDuplicatesOption>
            <jumpToMethod>true</jumpToMethod>
            <classNameVm>${class0.qualifiedName}Test</classNameVm>
            <alwaysPromptForPackage>false</alwaysPromptForPackage>
        </templates>
    </templates>
</codeTemplateList>
